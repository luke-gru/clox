var global = "global";
fun locals_binding() {
    var a = 1;
    var b = 2;
    return Binding();
}

fun param_binding(a, b) {
    return Binding();
}

fun default_param_binding(a=1) {
    return Binding();
}

fun ignores_globals() {
    global = 1;
    var a = 2;
    return Binding();
}

fun with_block(&blk) {
    return Binding();
}

fun with_splat(*args) {
    return Binding();
}

fun with_upvalue() {
    var a = 1;
    var f = fun() {
        a += 1;
    };
    return [f, Binding()];
}

class C {
    aMethod() {
        return Binding();
    }
}

print locals_binding().localVariables().inspect();
print param_binding(3,4).localVariables().inspect();
print default_param_binding().localVariables().inspect();
print ignores_globals().localVariables().inspect();
print with_block().localVariables();
print with_block() -> { }.localVariables();
print with_splat().localVariables();
print with_splat(1,2,3).localVariables();

var ary = with_upvalue();
var closure = ary[0];
var binding = ary[1];
print binding.localVariableGet("a");
// doesn't increment "a", "a" is copied with Binding()
closure();
print binding.localVariableGet("a");

var b = locals_binding();
print b.localVariableGet("a");
print b.localVariableGet("b");
print b.localVariableGet("nonexistent");
b.localVariableSet("a", 5);
print b.localVariableGet("a");
print b.localVariableGet("b");

print locals_binding().receiver();
b = C().aMethod();
print b.receiver();
print b.inspect();

__END__
-- expect: --
%{"a":1,"b":2}
%{"a":3,"b":4}
%{"a":1}
%{"a":2}
{blk => nil}
{blk => <instance Block>}
{args => []}
{args => [1,2,3]}
1
1
1
2
nil
5
2
nil
<instance C>
#<Binding C#aMethod>
