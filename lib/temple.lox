/*

Ex 1:
t = Temple("hello %{= name %}", ["name"]);
t.compile();
print t.eval(%{"name": "Luke"});

Ex 2:
t = Temple(<<<EOS
%{ if (greeting == "hi") { %}
HI %{= name %}
%{ } else { %}
BYE %{= name %}
%{ } %}
EOS, ["greeting", "name"]);

compiles to:

fun temple_eval(_args) {
    var greeting; var name;
    var _b = Binding();
    foreach (k, v in _args) {
        _b.localVariableSet(k, v);
    }
    var _buf = "";
    if (greeting == "hi") {
        _buf.push("HI ");
        _buf.push(name);
        _buf.push("\n");
    } else {
        _buf.push("BYE ")
        _buf.push(name);
        _buf.push("\n");
    }
    return _buf;
}
*/

class Temple {
    init(str, variableNames) {
        this.str = str;
        this.parts = [];
        this.variableNames = variableNames;
        this._compiledFunction = nil;
    }

    compile() {
        if (this._compiledFunction) { return this; }
        this.compileFunction();
        return this;
    }

    eval(valuesMap) {
        if (!this._compiledFunction) {
            throw Error("Uncompiled template called eval");
        }
        var fn = this._compiledFunction;
        return fn(valuesMap);
    }

    compileFunction() {
        // preamble
        var fnLines = [];
        foreach (varName in this.variableNames) {
            fnLines.push("var ${varName};");
        }
        fnLines.push("var _b = Binding();");
        fnLines.push("foreach (k, v in _args) {");
        fnLines.push("  _b.localVariableSet(k, v);");
        fnLines.push("}");
        fnLines.push("var _buf = '';");

        var pieces = this.str.split("%{");
        foreach (piece in pieces) {
            if (piece == "") {
                // do nothing
            } else {
                if (piece[0] == '=') {
                    var codePieceEndIdx = piece.index("%}");
                    var codeLine = piece.substr(1, codePieceEndIdx-1);
                    fnLines.push("_buf.push(" + codeLine + ");");
                    var rest = piece.substr(codePieceEndIdx+2, -1);
                    if (rest != "") {
                        fnLines.push("_buf.push(" + rest.inspect() + ");");
                    }
                } else {
                    piece = piece.compactLeft();
                    var codePieceEndIdx = piece.index("%}");
                    var codeLine = piece.substr(0, codePieceEndIdx);
                    fnLines.push(codeLine);
                    var rest = piece.substr(codePieceEndIdx+2, -1).compactLeft();
                    if (rest.compact() != "") {
                        fnLines.push("_buf.push(" + rest.inspect() + ");");
                    }
                }
            }
        }
        fnLines.push('return _buf;');
        var fn = "var f = fun (_args) {\n" + fnLines.join("\n") + "}; return f;";
        var res = eval(fn);
        this._compiledFunction = res;
    }
}
