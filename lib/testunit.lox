class AssertionError < Error { }
class TestUnit {
  this._successes = 0;
  this._fails = 0;
  this._assertionsPassed = 0;
  this._tests = %{};
  this._errors = [];
  this._classesRan = %{};
  this._classesRegistered = %{};
  this._autorunRegistered = false;
  this._autorunClasses = %{};

  class registerTest(name) {
    TestUnit._tests[this] = TestUnit._tests[this] or [];
    TestUnit._tests[this] << name;
  }

  class methodAdded(name) {
    if (name.substr(0, 4) == "test") {
      TestUnit._classesRegistered[this] = true;
      this.registerTest(name);
    }
  }

  class autorun(outputProgress: true, outputReport: true) {
    if (TestUnit._autorunRegistered) {
      return;
    }
    atExit(fun() {
      foreach (klass in TestUnit._classesRegistered.keys()) {
        klass.runTests(
          outputProgress: outputProgress,
          outputReport: outputReport);
      }
    });
    TestUnit._autorunRegistered = true;
  }

  class successes() {
    return TestUnit._successes;
  }

  class runTests(outputProgress: true, outputReport: true) {
    if (TestUnit._classesRan[this]) {
      return 1;
    }
    var tinstance = this();
    var tests = TestUnit._tests[this] or [];
    for (var i = 0; i < tests.size(); i+=1) {
      var tname = tests[i];
      try {
        tinstance.send(tname);
        if (outputProgress) {
          print ".";
        }
        TestUnit._successes += 1;
      } catch (AssertionError e) {
        if (outputProgress) {
          print "F";
        }
        TestUnit._errors << [tname, e.message];
        TestUnit._fails += 1;
      }
    }
    TestUnit._classesRan[this] = true;
    if (TestUnit._errors.size() == 0) {
      if (outputReport) {
        print "Success: passed ${TestUnit.successes} tests with ${TestUnit.assertionsPassed} assertions";
      }
      return 0;
    } else {
      if (outputReport) {
        print "${TestUnit._errors.size()} test failures:";
        foreach (err in TestUnit._errors) {
          print "${err[0]}: ${err[1]}";
        }
        print "passed ${TestUnit._successes} tests with ${TestUnit._assertionsPassed} assertions";
      }
      return 1;
    }
  }

  assertEq(expected, result) {
    if (expected != result) {
      throw AssertionError("Expected ${expected} to equal to ${result}");
    }
    this._assertionPassed();
  }

  assert(result) {
    if (!result) {
      throw AssertionError("Expected ${result} to be true");
    }
    this._assertionPassed();
  }

  _assertionPassed() {
    TestUnit._assertionsPassed += 1;
  }
}

__END__

usage:
requireScript("testunit")

class MyTests < TestUnit {
  fun testEqual() {
    this.assertEq(1, 1);
  }
  this.registerTest("testEqual");
  this.runTests();
}
