class TestUnit {
  class AssertionError < Error {}
  this._successes = 0;
  this._fails = 0;
  this._assertionsPassed = 0;
  this._tests = %{};
  this._errors = [];
  this._classesRan = %{};
  this._classesRegistered = %{};
  this._autorunRegistered = false;
  this._autorunClasses = %{};

  class registerTest(name) {
    TestUnit._tests[this] = TestUnit._tests[this] or [];
    TestUnit._tests[this] << name;
  }

  class methodAdded(name) {
    if (name.substr(0, 4) == "test") {
      TestUnit._classesRegistered[this] = true;
      this.registerTest(name);
    }
  }

  class autorun(outputProgress: true, outputReport: true, exit: true) {
    if (TestUnit._autorunRegistered) {
      return;
    }
    atExit(fun() {
      var fail = false;
      foreach (klass in TestUnit._classesRegistered.keys()) {
        var res = klass.runTests(
          outputProgress: outputProgress,
          outputReport: outputReport);
        if (!fail and res != 0) {
          fail = true;
        }
      }
      var exitStatus = 0;
      if (fail) {
        exitStatus = 1;
      }
      if (exit) {
        _exit(exitStatus);
      }
    });
    TestUnit._autorunRegistered = true;
  }

  class successes() {
    return TestUnit._successes;
  }

  class failures() {
    return TestUnit._fails;
  }

  class runTests(outputProgress: true, outputReport: true) {
    if (TestUnit._classesRan[this]) {
      return 1;
    }
    var tinstance = this();
    var tests = TestUnit._tests[this] or [];
    for (var i = 0; i < tests.size(); i+=1) {
      var tname = tests[i];
      try {
        tinstance.send(tname);
        if (outputProgress) {
          stdout.write(".");
        }
        TestUnit._successes += 1;
      } catch (AssertionError e) {
        if (outputProgress) {
          stdout.write("F");
        }
        TestUnit._errors << [tname, e.message];
        TestUnit._fails += 1;
      }
    }
    TestUnit._classesRan[this] = true;
    if (TestUnit._errors.size() == 0) {
      if (outputReport) {
        print "\nSuccess: passed ${TestUnit.successes} tests with ${TestUnit.assertionsPassed} assertions";
      } else {
        stdout.write("\n");
      }
      return 0;
    } else {
      if (outputReport) {
        print "\n${TestUnit._errors.size()} test failures:";
        foreach (err in TestUnit._errors) {
          print "${err[0]}: ${err[1]}";
        }
        print "passed ${TestUnit._successes} tests with ${TestUnit._assertionsPassed} assertions";
      } else {
        stdout.write("\n");
      }
      return 1;
    }
  }

  assert(result) {
    if (!result) {
      throw AssertionError("Expected ${result} to be true");
    }
    this._assertionPassed();
  }

  assertEq(expected, result) {
    if (expected != result) {
      throw AssertionError("Expected ${expected} to equal to ${result}");
    }
    this._assertionPassed();
  }

  assertMatch(result, pattern) {
    if (classof(pattern) != Regex) {
      throw ArgumentError("Expected regex as 2nd argument to assertMatch");
    }
    if (!pattern.match(result)) {
      throw AssertionError("Expected ${result} to match ${pattern}");
    }
    this._assertionPassed();
  }

  _assertionPassed() {
    TestUnit._assertionsPassed += 1;
  }
}

__END__

usage:
requireScript("testunit")

class MyTests < TestUnit {
  fun testEqual() {
    this.assertEq(1, 1);
  }
}

TestUnit.autorun() /* or, MyTests.runTests(), to run them immediately instead
of on program exit */
