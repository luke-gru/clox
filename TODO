TODO
====

Features
--------

* Add Array#deleteAt
* add iterNext() support for iterators
* Make it so that global variables aren't accessible everywhere, or that
the syntax is different for them, like in ruby.
* Saving/loading bytecode to disk
* Add benchmark library/internals so I can benchmark/profile performance of the
interpreter
* Add threads with libpthread [PARTIAL]
  stopVM() has to work with current thread only
* Add File class [PARTIAL]
* Add Class#ancestors
* Add signal trap handlers (`trap(signame, fun() { })`)
* Add Mutex class, mutexes for thread synchronization
* release GVL after performing n instructions, or add timer thread
* Add String#replace(other)
* add multiple var declaration, setters for array returns [GIT BRANCH]
* Make nil, true, false instances?
* Make variable lookup work as lookup in Environment tables, not statically
compiled lookup
* Integrate regexes from regex.c
* Allow more constants in a chunk (more than 256 bytes)
* Allow bigger jumps (more than 1 byte offsets)
* Throw SyntaxError from invalid compile/parse if given flag
* Add Process module, with static methods 'waitall'
* Add callSuper(argCount, *args) C API function that looks at current call frame, sees the
associated class, and calls the superclass method. [PARTIAL], doesn't work
with modules
* Allow throwing strings, maybe wrap them in Error class
* Allow debugger to list local variables, global variables, etc.
* Add constants to language
* Add socket class in io.c, make it work with multi-threading
* Allow getters to be called like methods (when given 0 args) [PARTIAL]
  - works for instances, not classes or modules (ex: Array.name())

Bugs
----
* Method lookup is bugged, instances get methods from static methods
* Bug in iterators for ENV and maps in general, it looks like (1.lox.err)
* Fix method lookup, look in modules for instances and classes/modules as well
as singleton classes, etc.
* super() bug in examples/super.lox (super doesn's look in modules for method)
* super bug for getters/setters (examples/super_setter.lox)
* Nodes created during parsing are never freed. This results in memory leak
when evaling.
* loadScript/requireScript should use pwd of lox process during startup for
file lookup, not pwd when calling loadScript/requireScript
* Debugger bugs, not evaluating variables in context of function
* Map with array or map key doesn't work (hashKey() method for objects)

Optimizations
-------------

* more bytecode optimization passes (ex: skip OP_NIL,OP_RETURN after an OP_RETURN)
* Add tailcall optimization
* simple JIT, maybe?
* different GC strategies, maybe support copying GC and/or generational GC
* optimize array and string method lookup with an inline cache in the
bytecode, and benchmark the lookup results
