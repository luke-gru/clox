TODO:

More language features to be close to my version of jlox

* Saving/loading bytecode to disk []
* Debugger support [IN PROGRESS]
* bytecode optimization pass [PARTIAL] (constant folding, jump consolidation, etc.)
* simple JIT, maybe? []
* different GC strategies, maybe support copying GC []

* get rid of calls to diePrintBacktrace(), or get it to actually throw an error
instance [IN PROGRESS]
* Add benchmark library/internals so I can benchmark/profile performance of the
interpreter []
* Make it so that global variables aren't accessible everywhere, or that
the syntax is different for them, like in $ruby. []

* optimize array and string method lookup with an inline cache in the
bytecode, and benchmark the lookup results []

* Add `foreach el in item` syntax with iter() method support [PARTIAL], no iterNext()
* Add threads with libpthread [PARTIAL]
* Add File class [PARTIAL]
* Add modules like in jlox [PARTIAL]
* Add Object#dup, and Class#ancestors []
* Add default ENV map-like thing as well as ARGV array
* Add signal trap handlers (`trap(signame, fun() { })`)
* Add Mutex class, mutexes for thread synchronization
* release GVL before performing blocking calls/syscalls etc. []
* Add String#length, String#replace(other) [IN PROGRESS]
* add multiple var declaration, setters for array returns [GIT BRANCH]
e Make nil, true, false instances? []
* Make variable lookup work as lookup in Environment tables, not statically
compiled lookup []
* Integrate regexes from regex.c

BUGS:
* super() bug in examples/super.lox
* Fix nil.toString() bugs, perhaps with String() conversion [PARTIAL], still
need to fix interpolation errors
* Throw proper errors when can't find instance/static methods in VM
* Allow throwing strings?
* Make throwing exceptions based on a tag stack, like Ruby. This allows
catching errors from the VM or C code and choosing to handle or propagate
them in C code (a C API). [IN PROGRESS]. So far, vm_protect does that, but
other errors aren't caught like this.
* Nodes created during parsing are never freed. This results in memory leak
when evaling.
