TODO:

More language features to be close to my version of jlox

* Saving/loading bytecode to disk []
* Debugger support [IN PROGRESS]
* bytecode optimization pass [PARTIAL] (constant folding, jump consolidation, etc.)
* simple JIT, maybe? []
* different GC strategies, maybe support copying GC []

* get rid of calls to diePrintBacktrace(), or get it to actually throw an error
instance [IN PROGRESS]
* Add benchmark library/internals so I can benchmark/profile performance of the
interpreter []
* Make it so that global variables aren't accessible everywhere, or that
the syntax is different for them, like in $ruby. []

* optimize array and string method lookup with an inline cache in the
bytecode, and benchmark the lookup results []

* Add eval() [IN PROGRESS, NEEDS WORK]
* Add `foreach el in item` syntax with iter() support []
* Add system() for running OS commands []
* Add fork() []
* Add threads with libpthread [PARTIAL]
* Make error reporting and throwing/catching errors work across
execution contexts (like eval) []
* Add File class [PARTIAL]
* Add modules like in jlox [PARTIAL]
* Add Object#dup, and Class#ancestors []
* Add capacity to string so don't have to reallocate after every push (PERF)
* Add default ENV map as well as ARGV array
* Add atexit hooks (`atexit(fun() { })`)
* Add signal trap handlers (`trap(signame, fun() { })`)
* Add Mutex class, mutexes for thread synchronization
* release GVL before performing blocking calls/syscalls etc.
* Add String#clear(), String#insertAt("new", 0), String#substr(start, len)

BUGS:
* super() bug in examples/super.lox
* Fix nil.toString() bugs
* Throw proper errors when can't find instance/static methods in VM
* throwing an error in eval() means it can't be caught outside the context
* Catch blocks mess up stack
