TODO
====

NOTE: This is just a brainstorm of things to do, in no special order. Not
all listed features/improvements are going to get done.

Features
--------

* Add more socket classes, like UnixSocket, TCPSocket, etc, along
with TCPServer, UnixServer. [MEDIUM]
* Add write_nonblock() to io [SMALL]
* Add negative lookahead to regular expressions [MEDIUM]
* Make it so that global variables aren't accessible everywhere, or that
the syntax is different for them, like in ruby.
* Dumping/loading values to/from disk (like Ruby's Marshal) [BIG]
* Allow '?' or '!' at end of method name? [SMALL]
* Disallow property get/set outside of class like Ruby? Also, make property
get/set a different sigil maybe, like @prop. [BIG]
* Add method privacy (private/public) [MEDIUM]
* Saving/loading bytecode to disk [BIG]
* Add coverage information (which lines were called, which lines
weren't). [MEDIUM]
* Add profiler (which functions take the longest, how long they take, how many
times they were called, percentage of total time, etc). [MEDIUM]
* Add guilds, with per-guild VM lock and restricted guild to guild sharing [HUGE]
* Add better VM introspection when doing per-instruction debugging. Be able to view
all VM stacks, ex: cref stack, this stack, etc. [MEDIUM]
* Add Class#undefMethod, make it look in superclasses as well [SMALL]
* Add inline method call cache, to skip method invocation lookup for method
calls. 1 callcache object per invocation of a method, inline in the bytecode.
Make it polymorphic, and measure the difference.
* Add Clox::AST lib
* Add clacc yacc compiler
* Add optparse lib
* Add make install target

Improvements
------------
* Get ObjScopes to have their own table of local variable indexes, for
Binding#localVariableSet and Binding#localVariableGet. This could also live on
the binding object itself.
* Make regular expression library work with bytecodes instead of nodes, and
benchmark the performance difference [BIG]
* Get threads running concurrently even with at least 1 mutex (right now, any
mutex held blocks release of GVL for a thread) [BIG]
* Allow giving keyword args to native functions [MEDIUM]
* Change string representation to UTF8 (maybe use iconv) [HUGE]
* Make autoloading thread-safe [MEDIUM]
* Make op stack growable, not fixed at 256 [MEDIUM]
* Make call stack growable, not fixed at 64 [MEDIUM]

Bugs
----
* super bug for setters (examples/super_setter.lox)
* Bug in repl, inspect on last value doesn't work right when inspect()
is a lox defined method instead of a native
* loadScript/requireScript should use pwd of lox process during startup for
file lookup, not pwd when calling loadScript/requireScript
* +=, -=, etc. doesn't work for non-variables/propsetters, like arg[0] += 1, or other lvalues
* GC stress=full (full GC after every allocation) fails for certain scripts in examples/ with 'thread' or
'mutex' in their name. See test/test_stress_gc.rb for details.

Optimizations
-------------

* more bytecode optimization passes (ex: skip OP_NIL,OP_RETURN after an OP_RETURN)
* Add tailcall optimization
* simple (tracing?) JIT
* different GC strategies, maybe support copying GC (but then need to change
Value representation, no more tagging, need to use struct).
