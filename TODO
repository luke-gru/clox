TODO
====

NOTE: This is just a brainstorm of things to do, in no special order. Not
all listed features/improvements are going to get done.

Features
--------

* Make it so that global variables aren't accessible everywhere, or that
the syntax is different for them, like in ruby.
* Dumping/loading values to/from disk (like Ruby's Marshal)
* Saving/loading bytecode to disk
* Add tracing/coverage information
* Add profiler
* Add socket class in io.c, make it work with multi-threading
* Allow getters to be called like methods (when given 0 args) [PARTIAL]
  works for instances, not classes or modules (ex: Array.name())
* Allow '?' or '!' at end of method name?
* Disallow property get/set outside of class like Ruby? Also, make property
get/set a different sigil maybe, like @prop.
* Add method privacy (private/public)
* Add defineMethod() function
* Allow dynamically loading lox extensions, which can be '.so' files.
* Add guilds, with per-guild VM lock and restricted guild to guild sharing
* Add Regex::MatchData class
* Get template library using eval instead of string subst

Improvements
------------
* Get threads running concurrently even with at least 1 mutex (right now, any
mutex held blocks release of GVL for a thread)
* Allow more constants in a chunk (more than 256 bytes)
* Allow bigger jumps (more than 1 byte offsets) [GIT BRANCH]
* Allow debugger (first, native functions maybe?) to list local variables, global variables, etc.
* Throw SyntaxError from invalid compile/parse if given flag
* Make variable lookup work as lookup in Environment tables, not statically
compiled lookup
* Allow giving keyword args to native functions
* Change string representation to UTF8 (maybe use iconv)
* Make autoloading thread-safe
* Make op stack growable, not fixed at 256
* Make call stack growable, not fixed at 64

Bugs
----
* super bug for getters/setters (examples/super_setter.lox)
* Nodes created during parsing are never freed. This results in memory leak
when evaling.
* loadScript/requireScript should use pwd of lox process during startup for
file lookup, not pwd when calling loadScript/requireScript
* +=, -=, etc. doesn't work for non-variables/propsetters, like arg[0] += 1, or other lvalues
* GC stress=full (full GC after every allocation) fails for certain scripts in examples/ with 'thread' or
'mutex' in their name. See test/test_stress_gc.rb for details.
* Eval() doesn't evaluate local variables, because there isn't a chunk
hierarchy, and we don't pass the current chunk as the environment when
evaling. The best solution might be to used named locals in the bytecode
instead of indexed. Would fix issues with the debugger as well.

Optimizations
-------------

* more bytecode optimization passes (ex: skip OP_NIL,OP_RETURN after an OP_RETURN)
* Add tailcall optimization
* simple (tracing?) JIT
* different GC strategies, maybe support copying GC (but then need to change
Value representation, no more tagging, need to use struct).
