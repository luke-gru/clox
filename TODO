TODO:
* More language features to be close to my version of jlox []
* Saving/loading bytecode to disk []
* Debugger support []
* bytecode optimization pass [] (constant folding, jump consolidation, etc.)
* simple JIT, maybe? []
* different GC strategies, maybe support copying GC []

* get rid of calls to runtimeError(), or get it to actually throw an error
instance []
* Add benchmark library/internals so I can benchmark/profile performance of the
interpreter []
* Change the way chunks are written, so they can be edited/removed more easily
through instruction optimization passes [DONE]
* Change compiler so that constant value strings aren't always added to
chunks even if they're the same strings that exist already in the chunk. [DONE]
* Make it so that global variables aren't accessible everywhere, or that
the syntax is different for them, like in $ruby.
* Allow operator overloading with opAdd, etc.

* optimize array and string method lookup with an inline cache in the
bytecode, and benchmark the lookup results

* Implement continue [DONE]
* Get jump patching working better, and consolidate jumps []
* Allow String#== [DONE]
* Get all test examples working [DONE]
* Make ObjClass an ObjInstance, and get metaclasses working, with property
get/set and class methods. [DONE]
* Allow re-opening classes [DONE]
* Add loadScript(), requireScript() [IN PROGRESS]
* Add eval()
* Add string interpolation []
* Add __DIR__ and __FILE__ []
* Add `in` block []
* Add `foreach *el in item` syntax with iter() support
* Add system() for running OS commands
* Add execution context for VM's, so loading a script doesn't screw up the
VM's state.

BUGS:
