TODO
====

NOTE: This is just a brainstorm of things to do, in no special order. Not
all listed features/improvements are going to get done.

Features
--------

* Add more socket classes, like UnixSocket, TCPSocket, etc, along
with TCPServer, UnixServer. [MEDIUM]
* Add write_nonblock() to io [SMALL]
* Add negative lookahead to regular expressions [MEDIUM]
* Make it so that global variables aren't accessible everywhere, or that
the syntax is different for them, like in ruby.
* Dumping/loading values to/from disk (like Ruby's Marshal) [BIG]
* Allow '?' or '!' at end of method name? [SMALL]
* Disallow property get/set outside of class like Ruby? Also, make property
get/set a different sigil maybe, like @prop. [BIG]
* Add method privacy (private/public) [MEDIUM]
* Saving/loading bytecode to disk [BIG]
* Add coverage information (which lines were called, which lines
weren't). [MEDIUM]
* Get binding object to eval() strings [BIG]
* Add profiler (which functions take the longest, how long they take, how many
times they were called, percentage of total time, etc). [MEDIUM]
* Add guilds, with per-guild VM lock and restricted guild to guild sharing [HUGE]

Improvements
------------
* Get local variable table living on the callframe object, not statically
implied in the bytecode. [SORT OF]
* Get REPL to allow pasted code that's multiple lines. Right now it reads just
one line at a time, it needs to account for non-finished statements. [BIG]
* Make regular expression library work with bytecodes instead of nodes, and
benchmark the performance difference [BIG]
* Get threads running concurrently even with at least 1 mutex (right now, any
mutex held blocks release of GVL for a thread) [BIG]
* Allow more constants in a chunk (more than 256 bytes) [MEDIUM]
* Allow bigger jumps (more than 1 byte offsets) [GIT BRANCH] [MEDIUM]
* Allow debugger to list global variables [SMALL]
* Get debugger listing of local variables to use frame function's variables
info instead of chunk's [MEDIUM]
* Throw SyntaxError from invalid compile/parse if given flag [MEDIUM]
* Allow giving keyword args to native functions [MEDIUM]
* Change string representation to UTF8 (maybe use iconv) [HUGE]
* Make autoloading thread-safe [MEDIUM]
* Make op stack growable, not fixed at 256 [MEDIUM]
* Make call stack growable, not fixed at 64 [MEDIUM]

Bugs
----
* A regular expression object that calls #match() will override captures
of the same regex object in other threads, I think?
* Undefined init for a class, when object is given parameters the error
message is Object#init received too many args instead of the original
method
* super bug for getters/setters (examples/super_setter.lox)
* Bug in repl, inspect on last value doesn't work right when inspect()
is a lox defined method instead of a native
* Nodes created during parsing are never freed. This results in memory leak
when evaling.
* loadScript/requireScript should use pwd of lox process during startup for
file lookup, not pwd when calling loadScript/requireScript
* +=, -=, etc. doesn't work for non-variables/propsetters, like arg[0] += 1, or other lvalues
* GC stress=full (full GC after every allocation) fails for certain scripts in examples/ with 'thread' or
'mutex' in their name. See test/test_stress_gc.rb for details.
* Eval() doesn't evaluate local variables, because there isn't a chunk
hierarchy, and we don't pass the current chunk as the environment when
evaling. The best solution might be to used named locals in the bytecode
instead of indexed. Would fix issues with the debugger as well.

Optimizations
-------------

* more bytecode optimization passes (ex: skip OP_NIL,OP_RETURN after an OP_RETURN)
* Add tailcall optimization
* simple (tracing?) JIT
* different GC strategies, maybe support copying GC (but then need to change
Value representation, no more tagging, need to use struct).
