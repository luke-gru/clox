TODO
====

Features
--------

* add iterNext() support for iterators
* Make it so that global variables aren't accessible everywhere, or that
the syntax is different for them, like in ruby. []
* Saving/loading bytecode to disk []
* Add benchmark library/internals so I can benchmark/profile performance of the
interpreter []
* optimize array and string method lookup with an inline cache in the
bytecode, and benchmark the lookup results []
* Add threads with libpthread [PARTIAL]
  stopVM() has to work with current thread only
* Add File class [PARTIAL]
* Add Class#ancestors []
* Add default ENV map-like thing as well as ARGV array
* Add signal trap handlers (`trap(signame, fun() { })`)
* Add Mutex class, mutexes for thread synchronization
* release GVL after performing n instructions, or add timer thread
* Add String#length, String#replace(other) [IN PROGRESS]
* add multiple var declaration, setters for array returns [GIT BRANCH]
* Make nil, true, false instances? []
* Make variable lookup work as lookup in Environment tables, not statically
compiled lookup []
* Integrate regexes from regex.c
* Add README
* Allow more constants in a chunk (more than 256 bytes)
* Allow bigger jumps (more than 1 byte offsets)
* Throw SyntaxError from invalid compile/parse if given flag
* Add Process module, with static methods 'kill', 'waitall', 'pid', 'ppid', etc.
* Add callSuper(argCount, *args) C API function that looks at current call frame, sees the
associated class, and calls the superclass method.

Bugs
----
* Fix method lookup, look in modules for instances and classes/modules as well
as singleton classes, etc.
* super() bug in examples/super.lox
* super bug for getters/setters (examples/super_setter.lox)
* Fix nil.toString() bugs, perhaps with String() conversion [PARTIAL], still
need to fix interpolation errors
* Allow throwing strings?
* Nodes created during parsing are never freed. This results in memory leak
when evaling.
* Interpolation should stringify (String()) every part

Optimizations
-------------

* more bytecode optimization passes (ex: skip OP_NIL,OP_RETURN after an OP_RETURN)
* Add tailcall optimization
* simple JIT, maybe? []
* different GC strategies, maybe support copying GC []
