TODO
====

NOTE: This is just a brainstorm of things to do, in no special order. Not
all listed features/improvements are going to get done.

Features
--------

* Add Array#deleteAt
* Add Map#replace(other)
* Add String#replace(other)
* Make it so that global variables aren't accessible everywhere, or that
the syntax is different for them, like in ruby.
* Saving/loading bytecode to disk
* Add benchmark library/internals so I can benchmark/profile performance of the
interpreter
* Add tracing/coverage information
* Add Class#ancestors
* Add signal trap handlers (`trap(signame, fun() { })`)
* Add Time class
* add multiple var declaration, setters for array returns [GIT BRANCH]
* Integrate regexes from regex.c
* Add Process module, with static methods 'waitall'
* Add constants to language
* Add socket class in io.c, make it work with multi-threading
* Allow getters to be called like methods (when given 0 args) [PARTIAL]
  works for instances, not classes or modules (ex: Array.name())
* Allow '?' or '!' at end of method name?
* Disallow property get/set outside of class like Ruby? Also, make property
get/set a different sigil maybe, like @prop.
* Add method privacy (private/public)
* Add defineMethod() function
* Allow dynamically loading lox extensions, which can be '.so' files.
* add iterNext() support for iterator-like objects

Improvements
------------
* Get threads running concurrently even with at least 1 mutex (right now, any
mutex held blocks release of GVL for a thread)
* Allow more constants in a chunk (more than 256 bytes)
* Allow bigger jumps (more than 1 byte offsets) [GIT BRANCH]
* Allow debugger (first, native functions maybe?) to list local variables, global variables, etc.
* Throw SyntaxError from invalid compile/parse if given flag
* Make variable lookup work as lookup in Environment tables, not statically
compiled lookup
* Add callSuper(argCount, *args) C API function that looks at current call frame, sees the
associated class, and calls the superclass method. [PARTIAL], doesn't work
with modules
* Add more to File class

Bugs
----
* Method lookup bugged for static methods, don't look in superclass statics
* Method lookup is bugged, instances get methods from static methods
* Fix method lookup, look in modules for instances and classes/modules as well
as singleton classes, etc.
* super() bug in examples/super.lox (super doesn's look in modules for method)
* super bug for getters/setters (examples/super_setter.lox)
* Nodes created during parsing are never freed. This results in memory leak
when evaling.
* loadScript/requireScript should use pwd of lox process during startup for
file lookup, not pwd when calling loadScript/requireScript
* Debugger bugs, not evaluating variables in context of function
* +=, -=, etc. doesn't work for non-variables/propsetters, like arg[0] +=1, or other lvalues

Optimizations
-------------

* more bytecode optimization passes (ex: skip OP_NIL,OP_RETURN after an OP_RETURN)
* Add tailcall optimization
* simple JIT, maybe?
* different GC strategies, maybe support copying GC and/or generational GC
* optimize array and string method lookup with an inline cache in the
bytecode, and benchmark the lookup results
* Add internalObject heap to reduce mallocs
